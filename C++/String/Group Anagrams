# BRUTE FORCE
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        for(int i=0; i<n; i++){
            sort(strs[i].begin(),strs[i].end());
        }
        
         
        sort(strs.begin(),strs.end());
        
        //push same string into vector by n2
        
    }
};

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
     unordered_map<string,vector<string>>mp;
        for(auto s : strs){
            string t = s;
            sort(t.begin(),t.end());
            mp[t].push_back(s);
        }
        vector<vector<string>> Anagrams;
        for(auto p : mp){
            Anagrams.push_back(p.second);
        }
        return Anagrams;
    }
};

Complexity Analysis

Time Complexity: O(NKlogK),
S= Space Complexity: O(NK)

-----------------------------------------------------------------------------------------

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
     
        map< vector<int>,vector<string> >mp;
        for(auto &x : strs){
            vector<int>v(26,0);
            for(auto &y : x){
                v[y-'a']++;
            }
            mp[v].push_back(x);
        }
            vector<vector<string>>s;
        for(auto &p : mp)
            s.push_back(p.second);
        return s;
    }
};

T = O(NK)
